pipeline {
    agent any
    
    environment {
        GITHUB_CREDENTIALS_ID = 'github-credentials'  
        REPO_NAME = 'SC3040-ASE/ms-product'  
        SNYK_INSTALLATION_NAME = 'snyk@latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'mvn clean install
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                sh 'Run your unit test here'
            }
        }

        stage('Snyk Security Scan') {
            steps {
                script {
                    def formatSnykResult = { result ->
                        def sb = new StringBuilder()
                        sb.append("### Snyk Security Scan Results<br><br>")
                        
                        if (result?.vulnerabilities?.size() == 0) {
                            sb.append("<h5> ✅ No vulnerabilities found </h5><br>")
                        } else {
                            sb.append("<h5> ⚠️ Found ${result?.vulnerabilities?.size() ?: 0} vulnerabilities </h5><br><hr>")
                            result?.vulnerabilities?.each { vuln ->
                                sb.append("<p>**[${vuln?.severity}]** ${vuln?.packageName}</p><br>")
                                sb.append("  - Issue: ${vuln?.title}<br>")
                                sb.append("  - Version: ${vuln?.version}<br>")
                                sb.append("  - Fixed in: ${vuln?.fixedIn ?: 'Not fixed'}</p></br>")
                            }
                        }
                        
                        return sb.toString()
                    }

                    def postToGitHubPR = { comment ->
                        withCredentials([usernamePassword(credentialsId: env.GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            def prNumber = env.CHANGE_ID
                            if (prNumber) {
                                sh """
                                    curl -u ${GITHUB_USER}:${GITHUB_TOKEN} \
                                         -X POST \
                                         -d '{"body": "${comment}"}' \
                                         https://api.github.com/repos/${env.REPO_NAME}/issues/${prNumber}/comments
                                """
                            } else {
                                echo "Not a pull request, skipping GitHub comment"
                            }
                        }
                    }

                    // Run Snyk and save the results
                    withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                        sh "SNYK_TOKEN=${SNYK_TOKEN} snyk test --json | tee snyk-result.json"
                    }
                    
                    // Parse the JSON output
                    def snykResult = readJSON file: 'snyk-result.json'
                    
                    // Format the result for GitHub comment
                    def formattedResult = formatSnykResult(snykResult)
                    
                    // Post the result to GitHub PR
                    postToGitHubPR(formattedResult)
                }
            }
        }      
    }
    
    post {
        failure {
            script {
                withCredentials([string(credentialsId: 'asana-token', variable: 'ASANA_TOKEN')]) {
                    def asanaProjectId = '1208082719272721'
                    def asanaSectionId = '1208132316363016'
                    def taskName = "Pipeline failure: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                    def taskNotes = "Pipeline failed. Check Jenkins for details: ${env.BUILD_URL}"
    
                    sh """
                    curl -H "Authorization: Bearer ${ASANA_TOKEN}" \
                         -H "Content-Type: application/json" \
                         -X POST \
                         -d '{"data": {"name": "${taskName}", "notes": "${taskNotes}", "projects": ["${asanaProjectId}"], "memberships":[{"project":"${asanaProjectId}","section":"${asanaSectionId}"}] }}' \
                         https://app.asana.com/api/1.0/tasks
                    """
                }
            }
        }
    }
}
