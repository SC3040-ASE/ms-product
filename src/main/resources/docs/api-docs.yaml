openapi: 3.0.0
info:
  title: Product API
  description: API for managing products
  version: 1.0.0

servers:
  - url: https://api.yourproductapp.com/v1
    description: Main (production) server

paths:
  /product/get:
    post:
      summary: Get a product by ID
      operationId: getProduct
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReadRequest'
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReadResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  
  /product/create:
    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreationRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateResponse'
        '403':
          description: Bad Request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/BadRequest'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          
  /product/update:
    post:
      summary: Update an existing product
      operationId: updateProduct
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdateResponse'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Forbidden'
        '404':
          description: Product Not found
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/NotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          
  /product/delete:
    post:
      summary: Delete a product
      operationId: deleteProduct
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDeleteRequest'
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDeleteResponse'
        
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Forbidden'
        '404':
          description: Product Not found
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/NotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /product/search:
    post:
      summary: Search for products
      operationId: searchProducts
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ProductSearchResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/BadRequest'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

components:
  schemas:
    ProductId:
      type: object
      properties:
        id:
          type: integer
          example: 1
  
    ProductReadRequest:
      type: object
      properties:
        id:
          type: string
          example: "unique-request-id"
        method:
          type: string
          example: "GET"
        path:
          type: string
          example: "/products/get"
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            "header_1": "val_1"
            "header_2": "val_1"
        body:
          $ref: '#/components/schemas/ProductId'
          
    ImageDTO:
      type: object
      properties:
        imageName:
          type: string
          example: "image_name_1"
        imageBase64:
          format: byte
          description: Base64 encoded image string
          example: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAoHBwkHBgoJG..."
    
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 123
        ownerId:
          type: integer
          example: 456
        productName:
          type: string
          example: "Sample Product"
        price:
          type: number
          format: double
          example: 19.99
        tags:
          type: array
          items:
            type: string
          example: ["Tag1", "Tag2"]
        condition:
          type: string
          example: "New"
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageDTO'
        totalQuantity:
          type: integer
          example: 100
        currentQuantity:
          type: integer
          example: 50
        categoryName:
          type: string
          example: "Electronics"
        description:
          type: string
          example: "This is a sample product description."
  
    ProductReadResponse:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          description: HTTP status code of the response
          example: 200
        Body:
          $ref: '#/components/schemas/Product'

    ProductCreationRequest:
      type: object
      properties:
        id:
          type: string
          example: "unique-request-id"
        method:
          type: string
          example: "POST"
        path:
          type: string
          example: "/products/create"
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            "header_1": "val_1"
            "header_2": "val_1"
        body:
          $ref: '#/components/schemas/ProductCreate'
    
    ProductCreate:
      type: object
      properties:
        ownerId:
          type: integer
          example: 123
        productName:
          type: string
          example: "Sample Product"
        price:
          type: number
          format: double
          example: 19.99
        tags:
          type: array
          items:
            type: string
          example: ["Tag1", "Tag2"]
        condition:
          type: string
          example: "New"
        imageBase64List:
          type: array
          items:
            type: string
          example: ["image_base64_string1", "image_base64_string2"]
        totalQuantity:
          type: integer
          example: 100
        category:
          type: string
          example: "Electronics"
        description:
          type: string
          example: "This is a sample product description."
    
    ProductCreateResponse:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          example: 200
        Body:
          type: string
          example: "Product created successfully"
          
    ProductUpdateRequest:
      type: object
      properties:
        id:
          type: string
          example: "unique-request-id"
        method:
          type: string
          example: "PUT"
        path:
          type: string
          example: "/products/update"
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            "header_1": "val_1"
            "header_2": "val_1"
        body:
          $ref: '#/components/schemas/ProductUpdate'
        
    ProductUpdate:
      type: object
      properties:
        id:
          type: integer
          example: 123
        ownerId:
          type: integer
          example: 456
        productName:
          type: string
          example: "Updated Product Name"
        price:
          type: number
          format: double
          example: 29.99
        tags:
          type: array
          items:
            type: string
          example: ["tag1", "tag2"]
        condition:
          type: string
          example: "Used"
        deleteImageList:
          type: array
          items:
            type: string
          example: ["image_name_to_delete_1", "image_name_to_delete_2"]
        newImageBase64List:
          type: array
          items:
            type: string
          example: ["new_image_base64_string1", "new_image_base64_string2"]
        totalQuantity:
          type: integer
          example: 80
        category:
          type: string
          example: "Home Appliances"
        description:
          type: string
          example: "This is an updated product description."
          
    ProductUpdateResponse:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          example: 200
        Body:
          type: string
          example: "Product updated successfully"

    ProductDeleteRequest:
      type: object
      properties:
        id:
          type: string
          example: "unique-request-id"
        method:
          type: string
          example: "DELETE"
        path:
          type: string
          example: "/products/delete"
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            "header_1": "val_1"
            "header_2": "val_1"
        body:
          $ref: '#/components/schemas/ProductDelete'
          
    ProductDelete:
      type: object
      properties:
        ownerId:
          type: integer
          example: 1
        productId:
          type: integer
          example: 2
          
    ProductDeleteResponse:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          example: 200
        Body:
          type: string
          example: "Product deleted successfully"
          
    ProductSearchRequest:
      type: object
      properties:
        id:
          type: string
          example: "unique-request-id"
        method:
          type: string
          example: "POST"
        path:
          type: string
          example: "/products/search"
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            "header_1": "val_1"
            "header_2": "val_1"
        body:
          $ref: '#/components/schemas/ProductSearchQuery'
          
    ProductSearchQuery:
      type: object
      properties:
        query:
          type: string
          example: "iphone"
        numberOfResults:
          type: integer
          example: 10
          
    ProductSearchResponse:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          description: HTTP status code of the response
          example: 200
        Body:
          $ref: '#/components/schemas/ProductSearch'
    
    ProductSearch:
      type: object
      properties:
        id:
          type: integer
          example: 123
        ownerId:
          type: integer
          example: 456
        productName:
          type: string
          example: "Sample Product"
        price:
          type: number
          format: double
          example: 19.99
        tags:
          type: array
          items:
            type: string
          example: ["Tag1", "Tag2"]
        condition:
          type: string
          example: "New"
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageDTO'
        totalQuantity:
          type: integer
          example: 100
        currentQuantity:
          type: integer
          example: 50
        categoryName:
          type: string
          example: "Electronics"
        description:
          type: string
          example: "This is a sample product description."
        score:
          type: number
          format: float
          example: 4.5

    BadRequest:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          example: 400
        Body:
          type: string
          example: "Bad request"
          
    NotFound:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          example: 404
        Body:
          type: string
          example: "NotFound"
          
    InternalServerError:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          example: 500
        Body:
          type: string
          example: "Internal Server Error"
          
    Forbidden:
      type: object
      properties:
        ID:
          type: string
          description: Unique identifier for the response message
          example: "unique-response-id"
        Status:
          type: integer
          example: 403
        Body:
          type: string
          example: "Forbidden"